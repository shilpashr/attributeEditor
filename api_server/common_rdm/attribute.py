# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.common_rdm.base_rdm import Model
from api_server import util


class Attribute(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, datatype: str=None, path: str=None, description: str=None, tags: List[str]=None):  # noqa: E501
        """Attribute - a model defined in Swagger

        :param name: The name of this Attribute.  # noqa: E501
        :type name: str
        :param type: The type of this Attribute.  # noqa: E501
        :type type: str
        :param datatype: The datatype of this Attribute.  # noqa: E501
        :type datatype: str
        :param path: The path of this Attribute.  # noqa: E501
        :type path: str
        :param description: The description of this Attribute.  # noqa: E501
        :type description: str
        :param tags: The tags of this Attribute.  # noqa: E501
        :type tags: List[str]
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            'datatype': str,
            'path': str,
            'description': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'datatype': 'datatype',
            'path': 'path',
            'description': 'description',
            'tags': 'tags'
        }

        self._name = name
        self._type = type
        self._datatype = datatype
        self._path = path
        self._description = description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Attribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Attribute of this Attribute.  # noqa: E501
        :rtype: Attribute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Attribute.

        Name of attribute  # noqa: E501

        :return: The name of this Attribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Attribute.

        Name of attribute  # noqa: E501

        :param name: The name of this Attribute.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this Attribute.

        Type of attribute  # noqa: E501

        :return: The type of this Attribute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Attribute.

        Type of attribute  # noqa: E501

        :param type: The type of this Attribute.
        :type type: str
        """

        self._type = type

    @property
    def datatype(self) -> str:
        """Gets the datatype of this Attribute.

        Data type of attribute  # noqa: E501

        :return: The datatype of this Attribute.
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype: str):
        """Sets the datatype of this Attribute.

        Data type of attribute  # noqa: E501

        :param datatype: The datatype of this Attribute.
        :type datatype: str
        """

        self._datatype = datatype

    @property
    def path(self) -> str:
        """Gets the path of this Attribute.

        Path of the attribute  # noqa: E501

        :return: The path of this Attribute.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this Attribute.

        Path of the attribute  # noqa: E501

        :param path: The path of this Attribute.
        :type path: str
        """

        self._path = path

    @property
    def description(self) -> str:
        """Gets the description of this Attribute.

        Description of attribute  # noqa: E501

        :return: The description of this Attribute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Attribute.

        Description of attribute  # noqa: E501

        :param description: The description of this Attribute.
        :type description: str
        """

        self._description = description

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Attribute.

        A Tag which refers the attribute, it can be a list of tags.  # noqa: E501

        :return: The tags of this Attribute.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Attribute.

        A Tag which refers the attribute, it can be a list of tags.  # noqa: E501

        :param tags: The tags of this Attribute.
        :type tags: List[str]
        """

        self._tags = tags
